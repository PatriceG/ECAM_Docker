import{o as s,c as i,k as a,q as r,s as u,A as n,e,a6 as t}from"../modules/vue-BIeBYBLx.js";import{I as o}from"./default-D2C4euab.js";import{b6 as l}from"../index-CMbpHyp1.js";import{p as m,u as d,f as p}from"./context-Cc2GRSkm.js";import"../modules/shiki-0tBZ1x7C.js";const c=e("h1",null,"JSON - Mode d’utilisation",-1),f=e("ul",null,[e("li",null,[e("p",null,"Il existe une API intégrée au JSDK (JSR 353) mais dans les faits elle est peu utilisée.")]),e("li",null,[e("p",null,[t("On utilise de préférence des librairies permettant de mapper directement un graphe d’objets Java sur un flux JSON => "),e("em",null,"Jackson"),t(" en particulier, mais aussi "),e("em",null,"JSON-Java"),t(" qui est plus simple à utiliser, mais ne dispose pas d’un mode Data Binding bidirectionnel.")])]),e("li",null,[e("p",null,"Jackson dispose de 3 modes d’utilisation:"),e("ul",null,[e("li",null,[t("Streaming – Lecture/Ecriture de JSON sous forme d’événements "),e("ul",null,[e("li",null,"Performant, peu consommateur de ressources, mais parfois complexe à implémenter. Sert surtout de fondation aux autres modes d’utilisation.")])]),e("li",null,[t("Tree Model – Fournit une représentation d’un document JSON sous la forme d’un arbre en mémoire. "),e("ul",null,[e("li",null,"Option la plus flexible, mais non-typée.")])]),e("li",null,"Data Binding – Mapping bidirectionnel entre un graphe d’objets java et un flux JSON")])])],-1),h={__name:"52",setup(_){return m(l),d(),(J,x)=>(s(),i(o,r(u(n(p)(n(l),51))),{default:a(()=>[c,f]),_:1},16))}};export{h as default};
